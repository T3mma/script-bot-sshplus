#!/bin/bash
# Author: T3mma
# github: https://github.com/Jrohy/multi-v2ray

# Tiempo de ejecución de la tarea programada en Argentina(0~23)
ARGENTINA_UPDATE_TIME=-3

# Registrar la ruta en la que se ejecutó el script por primera vez
BEGIN_PATH=$(pwd)

# Método de instalación, 0 para instalación nueva, 1 para actualizar manteniendo la configuración de v2ray
INSTALL_WAY=0

# Definir variable de operación, 0 para no, 1 para sí
HELP=0
REMOVE=0

BASE_SOURCE_PATH="https://multi.netlify.app"
UTIL_PATH="/etc/v2ray_util/util.cfg"
UTIL_CFG="$BASE_SOURCE_PATH/v2ray_util/util_core/util.cfg"
BASH_COMPLETION_SHELL="$BASE_SOURCE_PATH/v2ray"
CLEAN_IPTABLES_SHELL="$BASE_SOURCE_PATH/v2ray_util/global_setting/clean_iptables.sh"

# Cancelar alias temporalmente en CentOS
[[ -f /etc/redhat-release && -z $(echo $SHELL | grep zsh) ]] && unalias -a
[[ -z $(echo $SHELL | grep zsh) ]] && ENV_FILE=".bashrc" || ENV_FILE=".zshrc"

#######color code########
RED="31m"
GREEN="32m"
YELLOW="33m"
BLUE="36m"
FUCHSIA="35m"

colorEcho() {
    COLOR=$1
    echo -e "\033[${COLOR}${@:2}\033[0m"
}

#######get params#########
while [[ $# > 0 ]]; do
    key="$1"
    case $key in
    --remove)
        REMOVE=1
        ;;
    -h | --help)
        HELP=1
        ;;
    -k | --keep)
        INSTALL_WAY=1
        colorEcho ${BLUE} "mantener configuración actualizada\n"
        ;;
    *)
        # unknown option
        ;;
    esac
    shift # past argument or value
done
#############################

help() {
    echo "bash v2ray.sh [-h|--help] [-k|--keep] [--remove]"
    echo "  -h, --help           Show help"
    echo "  -k, --keep           keep the config.json to update"
    echo "      --remove         remove v2ray, xray && multi-v2ray"
    echo "                       no params to new install"
    return 0
}

removeV2Ray() {
    # Desinstalar el script de V2ray
    bash <(curl -L -s https://multi.netlify.app/go.sh) --remove >/dev/null 2>&1
    rm -rf /etc/v2ray >/dev/null 2>&1
    rm -rf /var/log/v2ray >/dev/null 2>&1

    # Desinstalar el script de Xray
    bash <(curl -L -s https://multi.netlify.app/go.sh) --remove -x >/dev/null 2>&1
    rm -rf /etc/xray >/dev/null 2>&1
    rm -rf /var/log/xray >/dev/null 2>&1

    # Limpiar las reglas de iptables relacionadas con v2ray
    bash <(curl -L -s $CLEAN_IPTABLES_SHELL)

    # Desinstalar multi-v2ray
    if [[ $(lsb_release -is) == "Ubuntu" && $(printf '%s\n' "24.04" "$(lsb_release -rs)" | sort -V | head -n1) == "24.04" ]]; then
        pipx uninstall v2ray_util
    else
        pip uninstall v2ray_util -y
    fi
    pip uninstall v2ray_util -y
    rm -rf /usr/share/bash-completion/completions/v2ray.bash >/dev/null 2>&1
    rm -rf /usr/share/bash-completion/completions/v2ray >/dev/null 2>&1
    rm -rf /usr/share/bash-completion/completions/xray >/dev/null 2>&1
    rm -rf /etc/bash_completion.d/v2ray.bash >/dev/null 2>&1
    rm -rf /usr/local/bin/v2ray >/dev/null 2>&1
    rm -rf /etc/v2ray_util >/dev/null 2>&1

    # Eliminar la tarea programada de actualización de v2ray
    crontab -l | sed '/SHELL=/d;/v2ray/d' | sed '/SHELL=/d;/xray/d' >crontab.txt
    crontab crontab.txt >/dev/null 2>&1
    rm -f crontab.txt >/dev/null 2>&1

    if [[ ${PACKAGE_MANAGER} == 'dnf' || ${PACKAGE_MANAGER} == 'yum' ]]; then
        systemctl restart crond >/dev/null 2>&1
    else
        systemctl restart cron >/dev/null 2>&1
    fi

    # Eliminar las variables de entorno de multi-v2ray
    sed -i '/v2ray/d' ~/$ENV_FILE
    sed -i '/xray/d' ~/$ENV_FILE
    source ~/$ENV_FILE

    colorEcho ${GREEN} "uninstall success!"
}

closeSELinux() {
    # Deshabilitar SELinux
    if [ -s /etc/selinux/config ] && grep 'SELINUX=enforcing' /etc/selinux/config; then
        sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
        setenforce 0
    fi
}

checkSys() {
    # Verificar si es Root
    [ $(id -u) != "0" ] && {
        colorEcho ${RED} "Error: You must be root to run this script"
        exit 1
    }

    if [[ $(command -v apt-get) ]]; then
        PACKAGE_MANAGER='apt-get'
    elif [[ $(command -v dnf) ]]; then
        PACKAGE_MANAGER='dnf'
    elif [[ $(command -v yum) ]]; then
        PACKAGE_MANAGER='yum'
    else
        colorEcho $RED "Not support OS!"
        exit 1
    fi
}

installDependent() {
    if [[ ${PACKAGE_MANAGER} == 'dnf' || ${PACKAGE_MANAGER} == 'yum' ]]; then
        ${PACKAGE_MANAGER} install socat crontabs bash-completion which -y
    else
        ${PACKAGE_MANAGER} update
        ${PACKAGE_MANAGER} install socat cron bash-completion ntpdate -y
    fi

    # Instalar python3 & pip
    source <(curl -sL https://python3.netlify.app/install.sh)

}

updateProject() {
    [[ ! $(type pip 2>/dev/null) ]] && colorEcho $RED "pip no install!" && exit 1

    if [[ $(lsb_release -is) == "Ubuntu" && $(printf '%s\n' "24.04" "$(lsb_release -rs)" | sort -V | head -n1) == "24.04" ]]; then
        apt install pipx -y
        pipx ensurepath
        pipx install v2ray_util
        pipx runpip v2ray-util install setuptools
    else
        pip install -U v2ray_util
    fi

    if [[ -e $UTIL_PATH ]]; then
        [[ -z $(cat $UTIL_PATH | grep lang) ]] && echo "lang=en" >>$UTIL_PATH
    else
        mkdir -p /etc/v2ray_util
        curl $UTIL_CFG >$UTIL_PATH
    fi

    rm -f /usr/local/bin/v2ray >/dev/null 2>&1
    ln -s $(which v2ray-util) /usr/local/bin/v2ray
    rm -f /usr/local/bin/xray >/dev/null 2>&1
    ln -s $(which v2ray-util) /usr/local/bin/xray

    # Eliminar el antiguo script de bash_completion de v2ray
    [[ -e /etc/bash_completion.d/v2ray.bash ]] && rm -f /etc/bash_completion.d/v2ray.bash
    [[ -e /usr/share/bash-completion/completions/v2ray.bash ]] && rm -f /usr/share/bash-completion/completions/v2ray.bash

    # Actualizar el script de bash_completion de v2ray
    curl $BASH_COMPLETION_SHELL >/usr/share/bash-completion/completions/v2ray
    curl $BASH_COMPLETION_SHELL >/usr/share/bash-completion/completions/xray
    if [[ -z $(echo $SHELL | grep zsh) ]]; then
        source /usr/share/bash-completion/completions/v2ray
        source /usr/share/bash-completion/completions/xray
    fi

    # Instalar el programa principal de V2ray
    [[ ${INSTALL_WAY} == 0 ]] && bash <(curl -L -s https://multi.netlify.app/go.sh)
}

# Sincronización de tiempo
timeSync() {
    if [[ ${INSTALL_WAY} == 0 ]]; then
        echo -e "${Info} Sincronizando el tiempo.. ${Font}"
        if [[ $(command -v ntpdate) ]]; then
            ntpdate pool.ntp.org
        elif [[ $(command -v chronyc) ]]; then
            chronyc -a makestep
        fi

        if [[ $? -eq 0 ]]; then
            echo -e "${OK} Sincronización de tiempo exitosa ${Font}"
            echo -e "${OK} ahora: $(date -R)${Font}"
        fi
    fi
}

profileInit() {

    # Limpiar las variables de entorno del módulo v2ray
    [[ $(grep v2ray ~/$ENV_FILE) ]] && sed -i '/v2ray/d' ~/$ENV_FILE && source ~/$ENV_FILE

    # Resolver el problema de visualización de caracteres latinos en Python3
    [[ -z $(grep PYTHONIOENCODING=utf-8 ~/$ENV_FILE) ]] && echo "export PYTHONIOENCODING=utf-8" >>~/$ENV_FILE && source ~/$ENV_FILE

    # Nueva configuración para una instalación desde cero
    [[ ${INSTALL_WAY} == 0 ]] && v2ray new
    echo ""
}

installFinish() {
    # Volver al punto de partida
    cd ${BEGIN_PATH}
    [[ ${INSTALL_WAY} == 0 ]] && WAY="install" || WAY="update"
    colorEcho ${GREEN} "¡multi-v2ray ${WAY} exitoso!\n"

    if ([[ ${INSTALL_WAY} == 0 ]]); then
        clear
        echo -e "\n\033[1;32mV2RAY INSTALADO CON EXITO !\033[0m"
        v2ray info
        echo -e "ESCRIBA  'v2ray' para ir al menu v2ray\n"
    fi
}

main() {
    [[ ${HELP} == 1 ]] && help && return
    [[ ${REMOVE} == 1 ]] && removeV2Ray && return
    [[ ${INSTALL_WAY} == 0 ]] && colorEcho ${BLUE} "Nueva instalación\n"
    checkSys
    installDependent
    closeSELinux
    timeSync
    updateProject
    profileInit
    installFinish
}

main
